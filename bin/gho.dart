// THIS FILE WAS GENERATED. DO NOT MODIFY BY HAND.
//
// This file was generated by the `lib/generate_executables.dart` script, and
// functions as a wrapper around the `bin/suitcase.dart` executable that will
// invoke the `gho` command.

import 'package:suitcase/src/command_context.dart';
import 'package:suitcase/src/command_runner.dart';
import 'package:universal_io/io.dart';

Future<void> main(List<String> args) async {
  await _flushThenExit(
    await withContext(
      CommandContext.fallback(),
      () => SuitcaseCommandRunner().run([
        'gho',
        ...args,
      ]),
    ),
  );
}

/// Flushes the stdout and stderr streams, then exits the program with the given
/// status code.
///
/// This returns a Future that will never complete, since the program will have
/// exited already. This is useful to prevent Future chains from proceeding
/// after you've decided to exit.
Future<void> _flushThenExit(int status) {
  return Future.wait<void>([stdout.close(), stderr.close()])
      .then<void>((_) => exit(status));
}

